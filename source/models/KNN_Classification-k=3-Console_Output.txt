
R version 3.6.2 (2019-12-12) -- "Dark and Stormy Night"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(gbm)
Loaded gbm 2.1.5
> library(caTools)
> library(pROC)
Type 'citation("pROC")' for a citation.

Attaching package: ‘pROC’

The following objects are masked from ‘package:stats’:

    cov, smooth, var

> library(doParallel)
Loading required package: foreach
Loading required package: iterators
Loading required package: parallel
> library(caret)
Loading required package: lattice
Loading required package: ggplot2
> #library(DMwR)
> #library(ROSE)
> library(MLmetrics)

Attaching package: ‘MLmetrics’

The following objects are masked from ‘package:caret’:

    MAE, RMSE

The following object is masked from ‘package:base’:

    Recall

> library(class)
> 
> motor_collision_crash_clean_data <- read.csv("C:\\Users\\alexf\\Documents\\CSML1000\\Assignments\\CSML1000-Group-10-assignment-1\\data\\motor_vehicle_collisions_crashes_cleaned.csv")
> 
> #data <- select(motor_collision_crash_clean_data, -c(id, timestamp, total_number_of_crashes))
> data <- select(motor_collision_crash_clean_data, -c(id, total_number_of_crashes))
> 
> data$timestamp = as.Date(data$timestamp)
> data$precinct = as.numeric(as.factor(data$precinct))
> data$month = as.numeric(data$month)
> data$week = as.numeric(data$week)
> data$day = as.numeric(data$day)
> data$weekday = as.numeric(data$weekday)
> data$hour = as.numeric(data$hour)
> data$did_crash_happen = as.factor(
+   ifelse(data$did_crash_happen ==  0, "no", "yes")
+ )
> 
> set.seed(123)
> # data_newer = data[data$timestamp > '2016-01-27', ]
> # data_sample = sample.split(data_newer$hour,SplitRatio=0.80)
> # trainData = subset(data_newer, data_sample==TRUE)
> # testData = subset(data_newer, data_sample==FALSE)
> trainData = data[data$timestamp > '2017-01-27' & data$timestamp < '2019-01-27', ]
> testData = data[data$timestamp > '2019-01-26', ]
> 
> trainData <- select(trainData, -c(timestamp))
> testData <- select(testData, -c (timestamp))
> 
> set.seed(123)
> columns = colnames(trainData)
> trainData_upsampled = upSample(
+   x = trainData[, columns[columns != "did_crash_happen"] ], 
+   y = trainData$did_crash_happen, list = F, yname = "did_crash_happen"
+ )
> print(table(trainData_upsampled$did_crash_happen))

     no     yes 
1011095 1011095 
> 
> #try downsampling instead...
> trainData_downsampled = downSample(
+   x = trainData[, columns[columns != "did_crash_happen"] ], 
+   y = trainData$did_crash_happen, list = F, yname = "did_crash_happen"
+ )
> print(table(trainData_downsampled$did_crash_happen))

    no    yes 
336097 336097 
> 
> #for KNN, we need to separate train response variable so it is put into cl 
> trainData_downsampled_response_column = trainData_downsampled[, ncol(trainData_downsampled)] #last column should always be response variable
> testData_response_column = testData[, ncol(testData)]
> 
> #remove response variable from trainData and testData
> #and normalize the predictors
> nor <- function(x) { (x -min(x))/(max(x)-min(x))   }
> trainData_downsampled_without_response_var = as.data.frame(lapply(trainData_downsampled[, 1:ncol(trainData_downsampled) - 1], nor))
> testData_without_response_var = as.data.frame(lapply(testData[, 1:ncol(testData) - 1], nor))
> 
> #PART 2: FOR LIBRARY-KNN ONLY
> #remove unnecessary data objects for library-knn
> rm(motor_collision_crash_clean_data, data, data_newer, data_sample, trainData)
Warning messages:
1: In rm(motor_collision_crash_clean_data, data, data_newer, data_sample,  :
  object 'data_newer' not found
2: In rm(motor_collision_crash_clean_data, data, data_newer, data_sample,  :
  object 'data_sample' not found
> rm(trainData_upsampled)
> #rm(trainData_downsampled, testData)
> gc()
           used  (Mb) gc trigger  (Mb)  max used   (Mb)
Ncells  2095653 112.0    6056928 323.5   7267821  388.2
Vcells 23112381 176.4  129425844 987.5 161782303 1234.4
> memory.limit()
[1] 16194
> memory.limit(size=30000)
[1] 30000
> 
> set.seed(123)
> ptm_rf <- proc.time()
> model_knn <- knn(
+   trainData_downsampled_without_response_var,
+   testData_without_response_var,
+   cl = trainData_downsampled_response_column,
+   k=3,
+   prob = TRUE #create probabilities so we can plot ROC
+ )
> proc.time() - ptm_rf
   user  system elapsed 
2047.30    0.25 2051.89 
> roc.model_knn = pROC::roc(
+   testData$did_crash_happen, 
+   as.vector(ifelse(attributes(model_knn)$prob >0.5, 1,0))
+   #ifelse(attributes(model_knn)$prob
+ )
Setting levels: control = no, case = yes
Setting direction: controls < cases
> auc.model_knn = pROC::auc(roc.model_knn)
> print(auc.model_knn)
Area under the curve: 0.4962
> 
> #plot ROC curve
> plot.roc(roc.model_knn, print.auc = TRUE, col = 'red' , print.thres = "best" )
> 
> confusionMatrix(model_knn, testData_response_column)
Confusion Matrix and Statistics

          Reference
Prediction     no    yes
       no  304870  61681
       yes 215703  92343
                                        
               Accuracy : 0.5888        
                 95% CI : (0.5876, 0.59)
    No Information Rate : 0.7717        
    P-Value [Acc > NIR] : 1             
                                        
                  Kappa : 0.137         
                                        
 Mcnemar's Test P-Value : <2e-16        
                                        
            Sensitivity : 0.5856        
            Specificity : 0.5995        
         Pos Pred Value : 0.8317        
         Neg Pred Value : 0.2998        
             Prevalence : 0.7717        
         Detection Rate : 0.4519        
   Detection Prevalence : 0.5434        
      Balanced Accuracy : 0.5926        
                                        
       'Positive' Class : no            
                                        
> #
> summary(auc.model_knn)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.4962  0.4962  0.4962  0.4962  0.4962  0.4962 