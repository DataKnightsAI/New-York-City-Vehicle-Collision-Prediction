---
title: "Motor Vehicle Collisions in New York City"
author: "Alex Fung, Viswesh Krishnamurthy, Tony Lee, Patrick Osborne"
date: "14/02/2020"
output: pdf_document
---
#code below is NOT shown in final document
knitr::opts_chunk$set(echo = TRUE)
raw_crashesData <- read.csv('./data/Motor_Vehicle_Collisions_-_Crashes.csv')
clean_crashesData <- read.csv('./data/motor_vehicle_collisions_crashes_cleaned.csv')
#loading libraries
library(ggplot2) #for plotting graphs
library(RColorBrewer) #for organizing colour use with palettes
library(gridExtra) #layout of figures
library(data.table) #used to subset data
library(xtable)#used to print tables in the markdown document
outlineColour = brewer.pal(9, "Set1") #colour palette for outlining graphs
fillColour = brewer.pal(9, "Pastel1") #colour palette for filling graphs
memory.limit(size=56000)
#code below IS shown in final document
data_dictionary <- read.csv('./data/data_dictionary.csv')
library(knitr)
kable(data_dictionary[], caption = "Data Dictionary - Motor Vehicle Collisions â€“ Crashes", format = "latex")
options(xtable.comment = FALSE)
options(xtable.floating = FALSE)
print(xtable(summary(raw_crashesData[,1:6])), include.rownames = FALSE, scalebox=0.6)
print("  \n")
print(xtable(summary(raw_crashesData[,7:10])), include.rownames = FALSE, scalebox=0.6)
print("  \n")
print(xtable(summary(raw_crashesData[,11:14])), include.rownames = FALSE, scalebox=0.6)
print("  \n")
print(xtable(summary(raw_crashesData[,15:18])), include.rownames = FALSE, scalebox=0.6)
print("  \n")
print(xtable(summary(raw_crashesData[,19:22])), include.rownames = FALSE, scalebox=0.6)
print("  \n")
print(xtable(summary(raw_crashesData[,23:26])), include.rownames = FALSE, scalebox=0.6)
print("  \n")
print(xtable(summary(raw_crashesData[,26:29])), include.rownames = FALSE, scalebox=0.6)
raw_crash_dates <- as.Date(raw_crashesData$CRASH.DATE, "%m/%d/%Y")
raw_crash_dates_df <- as.data.frame(raw_crash_dates)
setDT(raw_crash_dates_df)
raw_crash_dates_df <- raw_crash_dates_df[raw_crash_dates_df$raw_crash_dates > "2013-01-01", ]
raw_crash_dates_df <- raw_crash_dates_df[raw_crash_dates_df$raw_crash_dates < "2019-01-01", ]
clean_crash_dates <- raw_crash_dates
clean_crash_dates <- format(clean_crash_dates, format="%m/%d")
clean_crash_dates <- as.Date(clean_crash_dates, "%m/%d")
clean_crash_dates_df <- as.data.frame(clean_crash_dates)
#density plot of dates with all years
plot_rawCrashDates <- ggplot(raw_crash_dates_df, aes(x=raw_crash_dates_df$raw_crash_dates)) +
geom_density(fill=fillColour[1], colour=outlineColour[1], alpha = 0.4) +
geom_vline(aes(xintercept=as.numeric(as.Date("2013-01-01"))),color="black", linetype="solid", size=1) +
geom_vline(aes(xintercept=as.numeric(as.Date("2014-01-01"))),color="black", linetype="solid", size=1) +
geom_vline(aes(xintercept=as.numeric(as.Date("2015-01-01"))),color="black", linetype="solid", size=1) +
geom_vline(aes(xintercept=as.numeric(as.Date("2016-01-01"))),color="black", linetype="solid", size=1) +
geom_vline(aes(xintercept=as.numeric(as.Date("2017-01-01"))),color="black", linetype="solid", size=1) +
geom_vline(aes(xintercept=as.numeric(as.Date("2018-01-01"))),color="black", linetype="solid", size=1) +
geom_vline(aes(xintercept=as.numeric(as.Date("2019-01-01"))),color="black", linetype="solid", size=1) +
geom_vline(aes(xintercept=as.numeric(as.Date("2020-01-01"))),color="black", linetype="solid", size=1) +
xlab("Collisions per Day") + ylab("Density") + labs(title = "All Years")
#density plot of all dates with combined year
plot_cleanCrashDates <- ggplot(clean_crash_dates_df, aes(x=clean_crash_dates_df$clean_crash_dates)) +
geom_density(fill=fillColour[1], colour=outlineColour[1], alpha = 0.4) +
xlab("Collisions per Day") + ylab("Density") + labs(title = "Years Combined")
plot_rawCrashDates
plot_cleanCrashDates
plot2 <- ggplot(clean_crashesData, aes(x=clean_crashesData$timestamp)) +
geom_density(fill=fillColour[2], colour=outlineColour[2], alpha = 0.4) +
xlab("Date + Time") + ylab("Density") + labs(title = "Raw Timestamp")
plot2 <- ggplot(clean_crashesData$timestamp, aes(x=clean_crashesData$timestamp)) +
geom_density(fill=fillColour[2], colour=outlineColour[2], alpha = 0.4) +
xlab("Date + Time") + ylab("Density") + labs(title = "Raw Timestamp")
plot2 <- ggplot(as.data.frame(clean_crashesData$timestamp), aes(x=clean_crashesData$timestamp)) +
geom_density(fill=fillColour[2], colour=outlineColour[2], alpha = 0.4) +
xlab("Date + Time") + ylab("Density") + labs(title = "Raw Timestamp")
plot1 <- ggplot(as.data.frame(clean_crashesData$precinct), aes(x=clean_crashesData$precinct)) +
geom_density(fill=fillColour[1], colour=outlineColour[1], alpha = 0.4) +
xlab("Precincts") + ylab("Density") + labs(title = "Police Precints")
plot2 <- ggplot(as.data.frame(clean_crashesData$timestamp), aes(x=clean_crashesData$timestamp)) +
geom_density(fill=fillColour[2], colour=outlineColour[2], alpha = 0.4) +
xlab("Date + Time") + ylab("Density") + labs(title = "Raw Timestamp")
plot3 <- ggplot(as.data.frame(clean_crashesData$month), aes(x=clean_crashesData$month)) +
geom_density(fill=fillColour[3], colour=outlineColour[3], alpha = 0.4) +
xlab("Month") + ylab("Density") + labs(title = "Month of the Year")
plot4 <- ggplot(as.data.frame(clean_crashesData$week), aes(x=clean_crashesData$week)) +
geom_density(fill=fillColour[4], colour=outlineColour[4], alpha = 0.4) +
xlab("Week") + ylab("Density") + labs(title = "Week of the Year")
plot5 <- ggplot(as.data.frame(clean_crashesData$day), aes(x=clean_crashesData$day)) +
geom_density(fill=fillColour[5], colour=outlineColour[5], alpha = 0.4) +
xlab("Day") + ylab("Density") + labs(title = "Day of the Year")
plot6 <- ggplot(as.data.frame(clean_crashesData$weekday), aes(x=clean_crashesData$weekday)) +
geom_density(fill=fillColour[6], colour=outlineColour[6], alpha = 0.4) +
xlab("Day (in Week)") + ylab("Density") + labs(title = "Day of the Week")
plot7 <- ggplot(as.data.frame(clean_crashesData$hour), aes(x=clean_crashesData$hour)) +
geom_density(fill=fillColour[7], colour=outlineColour[7], alpha = 0.4) +
xlab("Hour") + ylab("Density") + labs(title = "Hour of the Day")
plot8 <- ggplot(as.data.frame(clean_crashesData$total_number_of_crashes), aes(x=clean_crashesData$total_number_of_crashes)) +
geom_density(fill=fillColour[8], colour=outlineColour[8], alpha = 0.4) +
xlab("Crashes") + ylab("Density") + labs(title = "Total Number of Crashes at specific Time Index")
plot9 <- ggplot(as.data.frame(clean_crashesData$did_crash_happen), aes(x=clean_crashesData$did_crash_happen)) +
geom_density(fill=fillColour[9], colour=outlineColour[9], alpha = 0.4) +
xlab("Crash?") + ylab("Density") + labs(title = "True/False Crash/No Crash at specific Time Index")
grid.arrange(plot1, plot2, plot3, plot4, plot5, plot6, plot7, plot8, plot9)
plot1
plot2
grid.arrange(plot1, plot3, plot4, plot5, plot6, plot7, plot8, plot9)
plot8 <- ggplot(as.data.frame(clean_crashesData$total_number_of_crashes), aes(x=clean_crashesData$total_number_of_crashes)) +
geom_bar(fill=fillColour[8], colour=outlineColour[8], alpha = 0.4) +
xlab("Crashes") + ylab("Density") + labs(title = "Total Number of Crashes at specific Time Index")
plot9 <- ggplot(as.data.frame(clean_crashesData$did_crash_happen), aes(x=clean_crashesData$did_crash_happen)) +
geom_bar(fill=fillColour[9], colour=outlineColour[9], alpha = 0.4) +
xlab("Crash?") + ylab("Density") + labs(title = "True/False Crash/No Crash at specific Time Index")
plot9
plot8
ALG <- c("Reg tree", "Decision tree", "Gradient Boosting", "Logistic Reg", "K-Nearest", "Random Forest")
AUC_VAL = c(0.6151, 0.6672, 0.667, 0.66, 0.5, 0.653)
AUC <- data.frame(ALG, AUC_VAL)
AUC <- AUC[order(AUC$AUC_VAL),]
plotAUC <- ggplot(AUC), aes(x=AUC)) +
geom_bar(fill=fillColour[1], colour=outlineColour[1], alpha = 0.4) +
xlab("ML Model") + ylab("AUC") + labs(title = "AUC")
library(ggplot2) #for plotting graphs
library(RColorBrewer) #for organizing colour use with palettes
library(gridExtra) #layout of figures
library(data.table) #used to subset data
library(xtable)#used to print tables in the markdown document
library(knitr)#used to output to LaTeX/PDF
outlineColour = brewer.pal(9, "Set1") #colour palette for outlining graphs
fillColour = brewer.pal(9, "Pastel1") #colour palette for filling graphs
ALG <- c("Reg tree", "Decision tree", "Gradient Boosting", "Logistic Reg", "K-Nearest", "Random Forest")
AUC_VAL = c(0.6151, 0.6672, 0.667, 0.66, 0.5, 0.653)
AUC <- data.frame(ALG, AUC_VAL)
AUC <- AUC[order(AUC$AUC_VAL),]
plotAUC <- ggplot(AUC), aes(x=AUC)) +
geom_bar(fill=fillColour[1], colour=outlineColour[1], alpha = 0.4) +
xlab("ML Model") + ylab("AUC") + labs(title = "AUC")
ALG <- c("Reg tree", "Decision tree", "Gradient Boosting", "Logistic Reg", "K-Nearest", "Random Forest")
AUC_VAL = c(0.6151, 0.6672, 0.667, 0.66, 0.5, 0.653)
AUC <- data.frame(ALG, AUC_VAL)
AUC <- AUC[order(AUC$AUC_VAL),]
plotAUC <- ggplot(aes(x=AUC)) +
geom_bar(fill=fillColour[1], colour=outlineColour[1], alpha = 0.4) +
xlab("ML Model") + ylab("AUC") + labs(title = "AUC")
ALG <- c("Reg tree", "Decision tree", "Gradient Boosting", "Logistic Reg", "K-Nearest", "Random Forest")
AUC_VAL = c(0.6151, 0.6672, 0.667, 0.66, 0.5, 0.653)
AUC <- data.frame(ALG, AUC_VAL)
AUC <- AUC[order(AUC$AUC_VAL),]
plotAUC <- ggplot(aes(x=AUC$ALG, y=AUC_VAL)) +
geom_bar(fill=fillColour[1], colour=outlineColour[1], alpha = 0.4) +
xlab("ML Model") + ylab("AUC") + labs(title = "AUC")
ALG <- c("Reg tree", "Decision tree", "Gradient Boosting", "Logistic Reg", "K-Nearest", "Random Forest")
AUC_VAL = c(0.6151, 0.6672, 0.667, 0.66, 0.5, 0.653)
AUC <- data.frame(ALG, AUC_VAL)
AUC <- AUC[order(AUC$AUC_VAL),]
plotAUC <- ggplot(aes(as.data.fram(x=AUC$ALG), y=AUC_VAL)) +
geom_bar(fill=fillColour[1], colour=outlineColour[1], alpha = 0.4) +
xlab("ML Model") + ylab("AUC") + labs(title = "AUC")
ALG <- c("Reg tree", "Decision tree", "Gradient Boosting", "Logistic Reg", "K-Nearest", "Random Forest")
AUC_VAL = c(0.6151, 0.6672, 0.667, 0.66, 0.5, 0.653)
AUC <- data.frame(ALG, AUC_VAL)
AUC <- AUC[order(AUC$AUC_VAL),]
plotAUC <- ggplot(aes(as.data.frame(x=AUC$ALG), y=AUC_VAL)) +
geom_bar(fill=fillColour[1], colour=outlineColour[1], alpha = 0.4) +
xlab("ML Model") + ylab("AUC") + labs(title = "AUC")
ALG <- c("Reg tree", "Decision tree", "Gradient Boosting", "Logistic Reg", "K-Nearest", "Random Forest")
AUC_VAL = c(0.6151, 0.6672, 0.667, 0.66, 0.5, 0.653)
AUC <- data.frame(ALG, AUC_VAL)
AUC <- AUC[order(AUC$AUC_VAL),]
plotAUC <- ggplot(AUC) + aes(x=AUC$ALG, y=AUC_VAL)) +
geom_bar(fill=fillColour[1], colour=outlineColour[1], alpha = 0.4) +
xlab("ML Model") + ylab("AUC") + labs(title = "AUC")
ALG <- c("Reg tree", "Decision tree", "Gradient Boosting", "Logistic Reg", "K-Nearest", "Random Forest")
AUC_VAL = c(0.6151, 0.6672, 0.667, 0.66, 0.5, 0.653)
AUC <- data.frame(ALG, AUC_VAL)
AUC <- AUC[order(AUC$AUC_VAL),]
plotAUC <- ggplot(AUC, aes(x=AUC$ALG)) +
geom_bar(fill=fillColour[1], colour=outlineColour[1], alpha = 0.4) +
xlab("ML Model") + ylab("AUC") + labs(title = "AUC")
ALG <- c("Reg tree", "Decision tree", "Gradient Boosting", "Logistic Reg", "K-Nearest", "Random Forest")
AUC_VAL = c(0.6151, 0.6672, 0.667, 0.66, 0.5, 0.653)
AUC <- data.frame(ALG, AUC_VAL)
AUC <- AUC[order(AUC$AUC_VAL),]
plotAUC <- ggplot(AUC, aes(x=AUC$ALG)) +
geom_bar(fill=fillColour[1], colour=outlineColour[1], alpha = 0.4) +
xlab("ML Model") + ylab("AUC") + labs(title = "AUC")
plotAUC
plotAUC <- ggplot(AUC, aes(x=AUC$ALG, y=AUC$AUC_VAL)) +
geom_bar(fill=fillColour[1], colour=outlineColour[1], alpha = 0.4) +
xlab("ML Model") + ylab("AUC") + labs(title = "AUC")
plotAUC
ALG <- c("Reg tree", "Decision tree", "Gradient Boosting", "Logistic Reg", "K-Nearest", "Random Forest")
AUC_VAL = c(0.6151, 0.6672, 0.667, 0.66, 0.5, 0.653)
AUC <- data.frame(ALG, AUC_VAL)
AUC <- AUC[order(AUC$AUC_VAL),]
plotAUC <- ggplot(AUC, aes(x=AUC$ALG, y=AUC$AUC_VAL)) +
geom_bar(fill=fillColour[1], colour=outlineColour[1], alpha = 0.4) +
xlab("ML Model") + ylab("AUC") + labs(title = "AUC")
plotAUC
ALG <- c("Reg tree", "Decision tree", "Gradient Boosting", "Logistic Reg", "K-Nearest", "Random Forest")
AUC_VAL = c(0.6151, 0.6672, 0.667, 0.66, 0.5, 0.653)
AUC <- data.frame(ALG, AUC_VAL)
AUC <- AUC[order(AUC$AUC_VAL),]
plotAUC <- ggplot(AUC, aes(x=AUC$ALG, y=AUC$AUC_VAL)) +
geom_bar(stat = "identity", fill=fillColour[1], colour=outlineColour[1], alpha = 0.4) +
xlab("ML Model") + ylab("AUC") + labs(title = "AUC")
plotAUC
ALG <- c("Reg tree", "Decision tree", "Gradient Boosting", "Logistic Reg", "K-Nearest", "Random Forest")
AUC_VAL = c(0.6151, 0.6672, 0.667, 0.66, 0.5, 0.653)
AUC <- data.frame(ALG, AUC_VAL)
AUC <- AUC[order(AUC$AUC_VAL),]
plotAUC <- ggplot(AUC, aes(x=AUC$ALG, y=AUC$AUC_VAL)) +
geom_bar(stat = "identity", position = 'dodge', fill=fillColour[1], colour=outlineColour[1], alpha = 0.4) +
xlab("ML Model") + ylab("AUC") + labs(title = "AUC") +
geom_text(aes(label=AUC$AUC_VAL), position=position_dodge(width=0.9), vjust=-0.25)
plotAUC
ALG <- c("Reg. Tree", "Decision Tree", "Gradient Boosting", "Logistic Reg.", "K-Nearest N.", "Random Forest")
AUC_VAL = c(0.6151, 0.6672, 0.667, 0.66, 0.5, 0.653)
AUC <- data.frame(ALG, AUC_VAL)
AUC <- AUC[order(AUC$AUC_VAL),]
plotAUC <- ggplot(AUC, aes(x=AUC$ALG, y=AUC$AUC_VAL)) +
geom_bar(stat = "identity", position = 'dodge', fill=fillColour[1], colour=outlineColour[1], alpha = 0.4) +
xlab("ML Model") + ylab("AUC") + labs(title = "AUC") +
geom_text(aes(label=AUC$AUC_VAL), position=position_dodge(width=0.9), vjust=-0.25)
plotAUC
setwd("C:/Git/Assignment 1 Git/CSML1000-Group-10-assignment-1/markdown")
raw_crashesData <- read.csv('../data/Motor_Vehicle_Collisions_-_Crashes.csv')
clean_crashesData <- read.csv('../data/motor_vehicle_collisions_crashes_cleaned.csv')
data_dictionary <- read.csv('../data/data_dictionary.csv')
